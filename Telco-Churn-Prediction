{
 "cells": [
  {
   "attachments": {
    "f6882cfa-e737-4eeb-8c87-08ea7d259aae.png": {
     "image/png": "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"
    }
   },
   "cell_type": "markdown",
   "id": "6fc98781",
   "metadata": {
    "papermill": {
     "duration": 0.013608,
     "end_time": "2024-10-13T16:52:33.002168",
     "exception": false,
     "start_time": "2024-10-13T16:52:32.988560",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    " **Veri Seti Hikayesi**\n",
    "Telco müşterikaybı verileri, üçüncüçeyrekte Kaliforniya'daki 7043 müşteriye evtelefonu ve İnternet hizmetleri sağlayan hayali bir telekom şirketi hakkında bilgi içerir. Hangi müşterilerin hizmetlerinden ayrıldığını, kaldığını veya hizmete kaydolduğunu gösterir.\n",
    "![image.png](attachment:f6882cfa-e737-4eeb-8c87-08ea7d259aae.png)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6f32d38b",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:33.035392Z",
     "iopub.status.busy": "2024-10-13T16:52:33.034873Z",
     "iopub.status.idle": "2024-10-13T16:52:36.713074Z",
     "shell.execute_reply": "2024-10-13T16:52:36.711795Z"
    },
    "papermill": {
     "duration": 3.697391,
     "end_time": "2024-10-13T16:52:36.715803",
     "exception": false,
     "start_time": "2024-10-13T16:52:33.018412",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.preprocessing import RobustScaler,LabelEncoder\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score, roc_auc_score, confusion_matrix, classification_report, RocCurveDisplay\n",
    "from sklearn.model_selection import train_test_split, cross_validate,GridSearchCV\n",
    "from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0941f70b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:36.744667Z",
     "iopub.status.busy": "2024-10-13T16:52:36.743884Z",
     "iopub.status.idle": "2024-10-13T16:52:36.751181Z",
     "shell.execute_reply": "2024-10-13T16:52:36.750070Z"
    },
    "papermill": {
     "duration": 0.024801,
     "end_time": "2024-10-13T16:52:36.753880",
     "exception": false,
     "start_time": "2024-10-13T16:52:36.729079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.max_rows', None)\n",
    "pd.set_option('display.float_format', lambda x: '%.3f' % x)\n",
    "pd.set_option('display.width', 500)\n",
    "def load():\n",
    "    data = pd.read_csv(\"/kaggle/input/telco-customer-churn/Telco-Customer-Churn.csv\")\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2525ed23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:36.782128Z",
     "iopub.status.busy": "2024-10-13T16:52:36.781668Z",
     "iopub.status.idle": "2024-10-13T16:52:36.895600Z",
     "shell.execute_reply": "2024-10-13T16:52:36.894322Z"
    },
    "papermill": {
     "duration": 0.131008,
     "end_time": "2024-10-13T16:52:36.898153",
     "exception": false,
     "start_time": "2024-10-13T16:52:36.767145",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CUSTOMERID</th>\n",
       "      <th>GENDER</th>\n",
       "      <th>SENIORCITIZEN</th>\n",
       "      <th>PARTNER</th>\n",
       "      <th>DEPENDENTS</th>\n",
       "      <th>TENURE</th>\n",
       "      <th>PHONESERVICE</th>\n",
       "      <th>MULTIPLELINES</th>\n",
       "      <th>INTERNETSERVICE</th>\n",
       "      <th>ONLINESECURITY</th>\n",
       "      <th>ONLINEBACKUP</th>\n",
       "      <th>DEVICEPROTECTION</th>\n",
       "      <th>TECHSUPPORT</th>\n",
       "      <th>STREAMINGTV</th>\n",
       "      <th>STREAMINGMOVIES</th>\n",
       "      <th>CONTRACT</th>\n",
       "      <th>PAPERLESSBILLING</th>\n",
       "      <th>PAYMENTMETHOD</th>\n",
       "      <th>MONTHLYCHARGES</th>\n",
       "      <th>TOTALCHARGES</th>\n",
       "      <th>CHURN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>29.850</td>\n",
       "      <td>29.85</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>34</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>56.950</td>\n",
       "      <td>1889.5</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>53.850</td>\n",
       "      <td>108.15</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>45</td>\n",
       "      <td>No</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>42.300</td>\n",
       "      <td>1840.75</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>70.700</td>\n",
       "      <td>151.65</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CUSTOMERID  GENDER  SENIORCITIZEN PARTNER DEPENDENTS  TENURE PHONESERVICE     MULTIPLELINES INTERNETSERVICE ONLINESECURITY ONLINEBACKUP DEVICEPROTECTION TECHSUPPORT STREAMINGTV STREAMINGMOVIES        CONTRACT PAPERLESSBILLING              PAYMENTMETHOD  MONTHLYCHARGES TOTALCHARGES CHURN\n",
       "0  7590-VHVEG  Female              0     Yes         No       1           No  No phone service             DSL             No          Yes               No          No          No              No  Month-to-month              Yes           Electronic check          29.850        29.85    No\n",
       "1  5575-GNVDE    Male              0      No         No      34          Yes                No             DSL            Yes           No              Yes          No          No              No        One year               No               Mailed check          56.950       1889.5    No\n",
       "2  3668-QPYBK    Male              0      No         No       2          Yes                No             DSL            Yes          Yes               No          No          No              No  Month-to-month              Yes               Mailed check          53.850       108.15   Yes\n",
       "3  7795-CFOCW    Male              0      No         No      45           No  No phone service             DSL            Yes           No              Yes         Yes          No              No        One year               No  Bank transfer (automatic)          42.300      1840.75    No\n",
       "4  9237-HQITU  Female              0      No         No       2          Yes                No     Fiber optic             No           No               No          No          No              No  Month-to-month              Yes           Electronic check          70.700       151.65   Yes"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=load()\n",
    "df.columns=[col.upper() for col in df.columns]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "31ee5b0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:36.927339Z",
     "iopub.status.busy": "2024-10-13T16:52:36.926901Z",
     "iopub.status.idle": "2024-10-13T16:52:36.938524Z",
     "shell.execute_reply": "2024-10-13T16:52:36.936877Z"
    },
    "papermill": {
     "duration": 0.029032,
     "end_time": "2024-10-13T16:52:36.941130",
     "exception": false,
     "start_time": "2024-10-13T16:52:36.912098",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def grab_col_names(dataframe, cat_th=10, car_th=20):\n",
    "    \"\"\"\n",
    "\n",
    "    Veri setindeki kategorik, numerik ve kategorik fakat kardinal değişkenlerin isimlerini verir.\n",
    "    Not: Kategorik değişkenlerin içerisine numerik görünümlü kategorik değişkenler de dahildir.\n",
    "\n",
    "    Parameters\n",
    "    ------\n",
    "        dataframe: dataframe\n",
    "                Değişken isimleri alınmak istenilen dataframe\n",
    "        cat_th: int, optional\n",
    "                numerik fakat kategorik olan değişkenler için sınıf eşik değeri\n",
    "        car_th: int, optinal\n",
    "                kategorik fakat kardinal değişkenler için sınıf eşik değeri\n",
    "\n",
    "    Returns\n",
    "    ------\n",
    "        cat_cols: list\n",
    "                Kategorik değişken listesi\n",
    "        num_cols: list\n",
    "                Numerik değişken listesi\n",
    "        cat_but_car: list\n",
    "                Kategorik görünümlü kardinal değişken listesi\n",
    "\n",
    "    Examples\n",
    "    ------\n",
    "        import seaborn as sns\n",
    "        df = sns.load_dataset(\"iris\")\n",
    "        print(grab_col_names(df))\n",
    "\n",
    "\n",
    "    Notes\n",
    "    ------\n",
    "        cat_cols + num_cols + cat_but_car = toplam değişken sayısı\n",
    "        num_but_cat cat_cols'un içerisinde.\n",
    "        Return olan 3 liste toplamı toplam değişken sayısına eşittir: cat_cols + num_cols + cat_but_car = değişken sayısı\n",
    "\n",
    "    \"\"\"\n",
    "\n",
    "    # cat_cols, cat_but_car\n",
    "    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n",
    "    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n",
    "                   dataframe[col].dtypes != \"O\"]\n",
    "    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n",
    "                   dataframe[col].dtypes == \"O\"]\n",
    "    cat_cols = cat_cols + num_but_cat\n",
    "    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n",
    "\n",
    "    # num_cols\n",
    "    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n",
    "    num_cols = [col for col in num_cols if col not in num_but_cat]\n",
    "\n",
    "    print(f\"Observations: {dataframe.shape[0]}\")\n",
    "    print(f\"Variables: {dataframe.shape[1]}\")\n",
    "    print(f'cat_cols: {len(cat_cols)}')\n",
    "    print(f'num_cols: {len(num_cols)}')\n",
    "    print(f'cat_but_car: {len(cat_but_car)}')\n",
    "    print(f'num_but_cat: {len(num_but_cat)}')\n",
    "    return cat_cols, num_cols, cat_but_car"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0bd7d243",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:36.968815Z",
     "iopub.status.busy": "2024-10-13T16:52:36.968372Z",
     "iopub.status.idle": "2024-10-13T16:52:37.009615Z",
     "shell.execute_reply": "2024-10-13T16:52:37.007961Z"
    },
    "papermill": {
     "duration": 0.058508,
     "end_time": "2024-10-13T16:52:37.012578",
     "exception": false,
     "start_time": "2024-10-13T16:52:36.954070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Observations: 7043\n",
      "Variables: 21\n",
      "cat_cols: 17\n",
      "num_cols: 2\n",
      "cat_but_car: 2\n",
      "num_but_cat: 1\n"
     ]
    }
   ],
   "source": [
    "# Adım 1: Numerik ve kategorik değişkenleri yakalayınız\n",
    "cat_cols, num_cols, cat_but_car=grab_col_names(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "255f7679",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:37.044516Z",
     "iopub.status.busy": "2024-10-13T16:52:37.044087Z",
     "iopub.status.idle": "2024-10-13T16:52:37.052375Z",
     "shell.execute_reply": "2024-10-13T16:52:37.051067Z"
    },
    "papermill": {
     "duration": 0.030733,
     "end_time": "2024-10-13T16:52:37.055911",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.025178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['GENDER',\n",
       " 'PARTNER',\n",
       " 'DEPENDENTS',\n",
       " 'PHONESERVICE',\n",
       " 'MULTIPLELINES',\n",
       " 'INTERNETSERVICE',\n",
       " 'ONLINESECURITY',\n",
       " 'ONLINEBACKUP',\n",
       " 'DEVICEPROTECTION',\n",
       " 'TECHSUPPORT',\n",
       " 'STREAMINGTV',\n",
       " 'STREAMINGMOVIES',\n",
       " 'CONTRACT',\n",
       " 'PAPERLESSBILLING',\n",
       " 'PAYMENTMETHOD',\n",
       " 'SENIORCITIZEN']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Adım 2: Gerekli düzenlemeleri yapınız. (Tip hatası olan değişkenler gibi)\n",
    "#Churn bağımlı değişken olduğu için cat_cols içinden çıkarıldı.\n",
    "cat_cols=[col for col in cat_cols if col not in \"CHURN\"]\n",
    "cat_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "28e753a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:37.089775Z",
     "iopub.status.busy": "2024-10-13T16:52:37.088368Z",
     "iopub.status.idle": "2024-10-13T16:52:37.097423Z",
     "shell.execute_reply": "2024-10-13T16:52:37.096182Z"
    },
    "papermill": {
     "duration": 0.028555,
     "end_time": "2024-10-13T16:52:37.100003",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.071448",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['TENURE', 'MONTHLYCHARGES']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6bda48be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:37.129646Z",
     "iopub.status.busy": "2024-10-13T16:52:37.128950Z",
     "iopub.status.idle": "2024-10-13T16:52:37.137128Z",
     "shell.execute_reply": "2024-10-13T16:52:37.135759Z"
    },
    "papermill": {
     "duration": 0.025256,
     "end_time": "2024-10-13T16:52:37.139597",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.114341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['CUSTOMERID', 'TOTALCHARGES']"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_but_car"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9009e0b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:37.169168Z",
     "iopub.status.busy": "2024-10-13T16:52:37.168785Z",
     "iopub.status.idle": "2024-10-13T16:52:37.204024Z",
     "shell.execute_reply": "2024-10-13T16:52:37.202893Z"
    },
    "papermill": {
     "duration": 0.053658,
     "end_time": "2024-10-13T16:52:37.207446",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.153788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7043 entries, 0 to 7042\n",
      "Data columns (total 21 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   CUSTOMERID        7043 non-null   object \n",
      " 1   GENDER            7043 non-null   object \n",
      " 2   SENIORCITIZEN     7043 non-null   int64  \n",
      " 3   PARTNER           7043 non-null   object \n",
      " 4   DEPENDENTS        7043 non-null   object \n",
      " 5   TENURE            7043 non-null   int64  \n",
      " 6   PHONESERVICE      7043 non-null   object \n",
      " 7   MULTIPLELINES     7043 non-null   object \n",
      " 8   INTERNETSERVICE   7043 non-null   object \n",
      " 9   ONLINESECURITY    7043 non-null   object \n",
      " 10  ONLINEBACKUP      7043 non-null   object \n",
      " 11  DEVICEPROTECTION  7043 non-null   object \n",
      " 12  TECHSUPPORT       7043 non-null   object \n",
      " 13  STREAMINGTV       7043 non-null   object \n",
      " 14  STREAMINGMOVIES   7043 non-null   object \n",
      " 15  CONTRACT          7043 non-null   object \n",
      " 16  PAPERLESSBILLING  7043 non-null   object \n",
      " 17  PAYMENTMETHOD     7043 non-null   object \n",
      " 18  MONTHLYCHARGES    7043 non-null   float64\n",
      " 19  TOTALCHARGES      7043 non-null   float64\n",
      " 20  CHURN             7043 non-null   object \n",
      "dtypes: float64(2), int64(2), object(17)\n",
      "memory usage: 1.1+ MB\n"
     ]
    }
   ],
   "source": [
    "#TOTALCHARGES için dönüştürme yapacağım ama '' boşluklar var. \n",
    "#önce bu boşlukları sıfır ile dolduralım.\n",
    "df[\"TOTALCHARGES\"]=df[\"TOTALCHARGES\"].replace(' ','0')\n",
    "df[\"TOTALCHARGES\"]=df[\"TOTALCHARGES\"].astype('float64')\n",
    "\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "617ca7c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:37.235697Z",
     "iopub.status.busy": "2024-10-13T16:52:37.235262Z",
     "iopub.status.idle": "2024-10-13T16:52:37.244798Z",
     "shell.execute_reply": "2024-10-13T16:52:37.243702Z"
    },
    "papermill": {
     "duration": 0.026515,
     "end_time": "2024-10-13T16:52:37.247308",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.220793",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Adım 3:  Numerik ve kategorik değişkenlerin veri içindeki dağılımını gözlemleyiniz.\n",
    "\n",
    "def cat_summary(dataframe, cat_cols, plot=False):\n",
    "    for col_name in cat_cols:\n",
    "        print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n",
    "                            \"Ratio\": 100 * dataframe[col_name].value_counts() / len(dataframe)}))\n",
    "        print(\"##########################################\")\n",
    "        if plot:\n",
    "            sns.countplot(x=dataframe[col_name], data=dataframe)\n",
    "            plt.show()\n",
    "\n",
    "def num_summary(dataframe, numerical_col, plot=False):\n",
    "    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n",
    "    print(dataframe[numerical_col].describe(quantiles).T)\n",
    "\n",
    "    if plot:\n",
    "        dataframe[numerical_col].hist(bins=20)\n",
    "        plt.xlabel(numerical_col)\n",
    "        plt.title(numerical_col)\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ba003db3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:37.275618Z",
     "iopub.status.busy": "2024-10-13T16:52:37.275174Z",
     "iopub.status.idle": "2024-10-13T16:52:37.348522Z",
     "shell.execute_reply": "2024-10-13T16:52:37.346935Z"
    },
    "papermill": {
     "duration": 0.090705,
     "end_time": "2024-10-13T16:52:37.351129",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.260424",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        GENDER  Ratio\n",
      "GENDER               \n",
      "Male      3555 50.476\n",
      "Female    3488 49.524\n",
      "##########################################\n",
      "         PARTNER  Ratio\n",
      "PARTNER                \n",
      "No          3641 51.697\n",
      "Yes         3402 48.303\n",
      "##########################################\n",
      "            DEPENDENTS  Ratio\n",
      "DEPENDENTS                   \n",
      "No                4933 70.041\n",
      "Yes               2110 29.959\n",
      "##########################################\n",
      "              PHONESERVICE  Ratio\n",
      "PHONESERVICE                     \n",
      "Yes                   6361 90.317\n",
      "No                     682  9.683\n",
      "##########################################\n",
      "                  MULTIPLELINES  Ratio\n",
      "MULTIPLELINES                         \n",
      "No                         3390 48.133\n",
      "Yes                        2971 42.184\n",
      "No phone service            682  9.683\n",
      "##########################################\n",
      "                 INTERNETSERVICE  Ratio\n",
      "INTERNETSERVICE                        \n",
      "Fiber optic                 3096 43.959\n",
      "DSL                         2421 34.375\n",
      "No                          1526 21.667\n",
      "##########################################\n",
      "                     ONLINESECURITY  Ratio\n",
      "ONLINESECURITY                            \n",
      "No                             3498 49.666\n",
      "Yes                            2019 28.667\n",
      "No internet service            1526 21.667\n",
      "##########################################\n",
      "                     ONLINEBACKUP  Ratio\n",
      "ONLINEBACKUP                            \n",
      "No                           3088 43.845\n",
      "Yes                          2429 34.488\n",
      "No internet service          1526 21.667\n",
      "##########################################\n",
      "                     DEVICEPROTECTION  Ratio\n",
      "DEVICEPROTECTION                            \n",
      "No                               3095 43.944\n",
      "Yes                              2422 34.389\n",
      "No internet service              1526 21.667\n",
      "##########################################\n",
      "                     TECHSUPPORT  Ratio\n",
      "TECHSUPPORT                            \n",
      "No                          3473 49.311\n",
      "Yes                         2044 29.022\n",
      "No internet service         1526 21.667\n",
      "##########################################\n",
      "                     STREAMINGTV  Ratio\n",
      "STREAMINGTV                            \n",
      "No                          2810 39.898\n",
      "Yes                         2707 38.435\n",
      "No internet service         1526 21.667\n",
      "##########################################\n",
      "                     STREAMINGMOVIES  Ratio\n",
      "STREAMINGMOVIES                            \n",
      "No                              2785 39.543\n",
      "Yes                             2732 38.790\n",
      "No internet service             1526 21.667\n",
      "##########################################\n",
      "                CONTRACT  Ratio\n",
      "CONTRACT                       \n",
      "Month-to-month      3875 55.019\n",
      "Two year            1695 24.066\n",
      "One year            1473 20.914\n",
      "##########################################\n",
      "                  PAPERLESSBILLING  Ratio\n",
      "PAPERLESSBILLING                         \n",
      "Yes                           4171 59.222\n",
      "No                            2872 40.778\n",
      "##########################################\n",
      "                           PAYMENTMETHOD  Ratio\n",
      "PAYMENTMETHOD                                  \n",
      "Electronic check                    2365 33.579\n",
      "Mailed check                        1612 22.888\n",
      "Bank transfer (automatic)           1544 21.922\n",
      "Credit card (automatic)             1522 21.610\n",
      "##########################################\n",
      "               SENIORCITIZEN  Ratio\n",
      "SENIORCITIZEN                      \n",
      "0                       5901 83.785\n",
      "1                       1142 16.215\n",
      "##########################################\n"
     ]
    }
   ],
   "source": [
    "cat_summary(df,cat_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e8314f17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:37.379334Z",
     "iopub.status.busy": "2024-10-13T16:52:37.378899Z",
     "iopub.status.idle": "2024-10-13T16:52:37.403613Z",
     "shell.execute_reply": "2024-10-13T16:52:37.402297Z"
    },
    "papermill": {
     "duration": 0.041853,
     "end_time": "2024-10-13T16:52:37.406323",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.364470",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  count   mean    std    min     5%    10%    20%    30%    40%    50%    60%    70%    80%     90%     95%     99%     max\n",
      "TENURE         7043.000 32.371 24.559  0.000  1.000  2.000  6.000 12.000 20.000 29.000 40.000 50.000 60.000  69.000  72.000  72.000  72.000\n",
      "MONTHLYCHARGES 7043.000 64.762 30.090 18.250 19.650 20.050 25.050 45.850 58.830 70.350 79.100 85.500 94.250 102.600 107.400 114.729 118.750\n"
     ]
    }
   ],
   "source": [
    "num_summary(df,num_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "698a4f94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:37.437282Z",
     "iopub.status.busy": "2024-10-13T16:52:37.436835Z",
     "iopub.status.idle": "2024-10-13T16:52:37.447810Z",
     "shell.execute_reply": "2024-10-13T16:52:37.446202Z"
    },
    "papermill": {
     "duration": 0.029707,
     "end_time": "2024-10-13T16:52:37.450466",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.420759",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Adım 4: Kategorik değişkenler ile hedef değişken incelemesini yapınız.\n",
    "le = LabelEncoder()\n",
    "df[\"CHURN\"]=le.fit_transform(df[\"CHURN\"])\n",
    "df[\"CHURN\"].unique() \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2939db4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:37.483030Z",
     "iopub.status.busy": "2024-10-13T16:52:37.482589Z",
     "iopub.status.idle": "2024-10-13T16:52:37.488952Z",
     "shell.execute_reply": "2024-10-13T16:52:37.487585Z"
    },
    "papermill": {
     "duration": 0.026685,
     "end_time": "2024-10-13T16:52:37.491870",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.465185",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#df.groupby(\"GENDER\").agg({\"CHURN\":[\"sum\",\"mean\"]})\n",
    "\n",
    "def target_summary_cat(dataframe,target,cat_cols):\n",
    "    for col in cat_cols:\n",
    "        print(dataframe.groupby(col).agg({target:[\"sum\",\"mean\"]}))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9247df51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:37.524225Z",
     "iopub.status.busy": "2024-10-13T16:52:37.523797Z",
     "iopub.status.idle": "2024-10-13T16:52:37.617789Z",
     "shell.execute_reply": "2024-10-13T16:52:37.616320Z"
    },
    "papermill": {
     "duration": 0.114263,
     "end_time": "2024-10-13T16:52:37.620629",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.506366",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       CHURN      \n",
      "         sum  mean\n",
      "GENDER            \n",
      "Female   939 0.269\n",
      "Male     930 0.262\n",
      "        CHURN      \n",
      "          sum  mean\n",
      "PARTNER            \n",
      "No       1200 0.330\n",
      "Yes       669 0.197\n",
      "           CHURN      \n",
      "             sum  mean\n",
      "DEPENDENTS            \n",
      "No          1543 0.313\n",
      "Yes          326 0.155\n",
      "             CHURN      \n",
      "               sum  mean\n",
      "PHONESERVICE            \n",
      "No             170 0.249\n",
      "Yes           1699 0.267\n",
      "                 CHURN      \n",
      "                   sum  mean\n",
      "MULTIPLELINES               \n",
      "No                 849 0.250\n",
      "No phone service   170 0.249\n",
      "Yes                850 0.286\n",
      "                CHURN      \n",
      "                  sum  mean\n",
      "INTERNETSERVICE            \n",
      "DSL               459 0.190\n",
      "Fiber optic      1297 0.419\n",
      "No                113 0.074\n",
      "                    CHURN      \n",
      "                      sum  mean\n",
      "ONLINESECURITY                 \n",
      "No                   1461 0.418\n",
      "No internet service   113 0.074\n",
      "Yes                   295 0.146\n",
      "                    CHURN      \n",
      "                      sum  mean\n",
      "ONLINEBACKUP                   \n",
      "No                   1233 0.399\n",
      "No internet service   113 0.074\n",
      "Yes                   523 0.215\n",
      "                    CHURN      \n",
      "                      sum  mean\n",
      "DEVICEPROTECTION               \n",
      "No                   1211 0.391\n",
      "No internet service   113 0.074\n",
      "Yes                   545 0.225\n",
      "                    CHURN      \n",
      "                      sum  mean\n",
      "TECHSUPPORT                    \n",
      "No                   1446 0.416\n",
      "No internet service   113 0.074\n",
      "Yes                   310 0.152\n",
      "                    CHURN      \n",
      "                      sum  mean\n",
      "STREAMINGTV                    \n",
      "No                    942 0.335\n",
      "No internet service   113 0.074\n",
      "Yes                   814 0.301\n",
      "                    CHURN      \n",
      "                      sum  mean\n",
      "STREAMINGMOVIES                \n",
      "No                    938 0.337\n",
      "No internet service   113 0.074\n",
      "Yes                   818 0.299\n",
      "               CHURN      \n",
      "                 sum  mean\n",
      "CONTRACT                  \n",
      "Month-to-month  1655 0.427\n",
      "One year         166 0.113\n",
      "Two year          48 0.028\n",
      "                 CHURN      \n",
      "                   sum  mean\n",
      "PAPERLESSBILLING            \n",
      "No                 469 0.163\n",
      "Yes               1400 0.336\n",
      "                          CHURN      \n",
      "                            sum  mean\n",
      "PAYMENTMETHOD                        \n",
      "Bank transfer (automatic)   258 0.167\n",
      "Credit card (automatic)     232 0.152\n",
      "Electronic check           1071 0.453\n",
      "Mailed check                308 0.191\n",
      "              CHURN      \n",
      "                sum  mean\n",
      "SENIORCITIZEN            \n",
      "0              1393 0.236\n",
      "1               476 0.417\n"
     ]
    }
   ],
   "source": [
    "target_summary_cat(df,\"CHURN\",cat_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "99cc7a57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:37.649820Z",
     "iopub.status.busy": "2024-10-13T16:52:37.649403Z",
     "iopub.status.idle": "2024-10-13T16:52:37.659382Z",
     "shell.execute_reply": "2024-10-13T16:52:37.657335Z"
    },
    "papermill": {
     "duration": 0.028029,
     "end_time": "2024-10-13T16:52:37.662351",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.634322",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Adım 5: Aykırı gözlem var mı inceleyiniz\n",
    "def outlier_thresholds(dataframe, col_name, q1=0.05, q3=0.95):\n",
    "    quartile1 = dataframe[col_name].quantile(q1)\n",
    "    quartile3 = dataframe[col_name].quantile(q3)\n",
    "    interquantile_range = quartile3 - quartile1\n",
    "    up_limit = quartile3 + 1.5 * interquantile_range\n",
    "    low_limit = quartile1 - 1.5 * interquantile_range\n",
    "    return low_limit, up_limit\n",
    "def check_outlier(dataframe, col_name):\n",
    "    low_limit, up_limit = outlier_thresholds(dataframe, col_name)\n",
    "    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n",
    "        print(col_name+\":true\")\n",
    "        return True\n",
    "    else:\n",
    "        print(col_name+\":false\")\n",
    "        return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f0c31d93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:37.693103Z",
     "iopub.status.busy": "2024-10-13T16:52:37.692671Z",
     "iopub.status.idle": "2024-10-13T16:52:37.708027Z",
     "shell.execute_reply": "2024-10-13T16:52:37.706756Z"
    },
    "papermill": {
     "duration": 0.033648,
     "end_time": "2024-10-13T16:52:37.710825",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.677177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TENURE:false\n",
      "MONTHLYCHARGES:false\n"
     ]
    }
   ],
   "source": [
    "for col in num_cols:\n",
    "    check_outlier(df,col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4f1744e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:37.741421Z",
     "iopub.status.busy": "2024-10-13T16:52:37.740987Z",
     "iopub.status.idle": "2024-10-13T16:52:37.764385Z",
     "shell.execute_reply": "2024-10-13T16:52:37.763000Z"
    },
    "papermill": {
     "duration": 0.041798,
     "end_time": "2024-10-13T16:52:37.766959",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.725161",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CUSTOMERID          0\n",
       "GENDER              0\n",
       "SENIORCITIZEN       0\n",
       "PARTNER             0\n",
       "DEPENDENTS          0\n",
       "TENURE              0\n",
       "PHONESERVICE        0\n",
       "MULTIPLELINES       0\n",
       "INTERNETSERVICE     0\n",
       "ONLINESECURITY      0\n",
       "ONLINEBACKUP        0\n",
       "DEVICEPROTECTION    0\n",
       "TECHSUPPORT         0\n",
       "STREAMINGTV         0\n",
       "STREAMINGMOVIES     0\n",
       "CONTRACT            0\n",
       "PAPERLESSBILLING    0\n",
       "PAYMENTMETHOD       0\n",
       "MONTHLYCHARGES      0\n",
       "TOTALCHARGES        0\n",
       "CHURN               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Adım 6: Eksik gözlem var mı inceleyiniz\n",
    "# eksik gozlem var mı yok mu sorgusu\n",
    "df.isnull().values.any()\n",
    "\n",
    "# degiskenlerdeki eksik deger sayisi\n",
    "df.isnull().sum()\n",
    "\n",
    "# degiskenlerdeki tam deger sayisi\n",
    "#df.notnull().sum()\n",
    "\n",
    "# veri setindeki toplam eksik deger sayisi\n",
    "#df.isnull().sum().sum()\n",
    "\n",
    "# en az bir tane eksik degere sahip olan gözlem birimleri\n",
    "#df[df.isnull().any(axis=1)]\n",
    "\n",
    "# tam olan gözlem birimleri\n",
    "#df[df.notnull().all(axis=1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0328eb05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:37.796377Z",
     "iopub.status.busy": "2024-10-13T16:52:37.795962Z",
     "iopub.status.idle": "2024-10-13T16:52:37.824032Z",
     "shell.execute_reply": "2024-10-13T16:52:37.822892Z"
    },
    "papermill": {
     "duration": 0.046083,
     "end_time": "2024-10-13T16:52:37.826798",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.780715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CUSTOMERID</th>\n",
       "      <th>GENDER</th>\n",
       "      <th>SENIORCITIZEN</th>\n",
       "      <th>PARTNER</th>\n",
       "      <th>DEPENDENTS</th>\n",
       "      <th>TENURE</th>\n",
       "      <th>PHONESERVICE</th>\n",
       "      <th>MULTIPLELINES</th>\n",
       "      <th>INTERNETSERVICE</th>\n",
       "      <th>ONLINESECURITY</th>\n",
       "      <th>ONLINEBACKUP</th>\n",
       "      <th>DEVICEPROTECTION</th>\n",
       "      <th>TECHSUPPORT</th>\n",
       "      <th>STREAMINGTV</th>\n",
       "      <th>STREAMINGMOVIES</th>\n",
       "      <th>CONTRACT</th>\n",
       "      <th>PAPERLESSBILLING</th>\n",
       "      <th>PAYMENTMETHOD</th>\n",
       "      <th>MONTHLYCHARGES</th>\n",
       "      <th>TOTALCHARGES</th>\n",
       "      <th>CHURN</th>\n",
       "      <th>NEW_TENURE_CAT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>29.850</td>\n",
       "      <td>29.850</td>\n",
       "      <td>0</td>\n",
       "      <td>short term customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>34</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>56.950</td>\n",
       "      <td>1889.500</td>\n",
       "      <td>0</td>\n",
       "      <td>long term customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>53.850</td>\n",
       "      <td>108.150</td>\n",
       "      <td>1</td>\n",
       "      <td>short term customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>45</td>\n",
       "      <td>No</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>42.300</td>\n",
       "      <td>1840.750</td>\n",
       "      <td>0</td>\n",
       "      <td>long term customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>70.700</td>\n",
       "      <td>151.650</td>\n",
       "      <td>1</td>\n",
       "      <td>short term customer</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CUSTOMERID  GENDER  SENIORCITIZEN PARTNER DEPENDENTS  TENURE PHONESERVICE     MULTIPLELINES INTERNETSERVICE ONLINESECURITY ONLINEBACKUP DEVICEPROTECTION TECHSUPPORT STREAMINGTV STREAMINGMOVIES        CONTRACT PAPERLESSBILLING              PAYMENTMETHOD  MONTHLYCHARGES  TOTALCHARGES  CHURN       NEW_TENURE_CAT\n",
       "0  7590-VHVEG  Female              0     Yes         No       1           No  No phone service             DSL             No          Yes               No          No          No              No  Month-to-month              Yes           Electronic check          29.850        29.850      0  short term customer\n",
       "1  5575-GNVDE    Male              0      No         No      34          Yes                No             DSL            Yes           No              Yes          No          No              No        One year               No               Mailed check          56.950      1889.500      0   long term customer\n",
       "2  3668-QPYBK    Male              0      No         No       2          Yes                No             DSL            Yes          Yes               No          No          No              No  Month-to-month              Yes               Mailed check          53.850       108.150      1  short term customer\n",
       "3  7795-CFOCW    Male              0      No         No      45           No  No phone service             DSL            Yes           No              Yes         Yes          No              No        One year               No  Bank transfer (automatic)          42.300      1840.750      0   long term customer\n",
       "4  9237-HQITU  Female              0      No         No       2          Yes                No     Fiber optic             No           No               No          No          No              No  Month-to-month              Yes           Electronic check          70.700       151.650      1  short term customer"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Görev 2 : Feature Engineering\n",
    "#Adım 2: Yeni değişkenler oluşturunuz.\n",
    "# tenure değişkenini kategorilere ayırıp yeni tenure değişkenleri oluşturmak.şirkette kaldığı ay sayısına göre nasıl tipte bir müşteri\n",
    "df.loc[(df[\"TENURE\"] <= 3), \"NEW_TENURE_CAT\"] = \"short term customer\"\n",
    "df.loc[(df[\"TENURE\"] < 3)&(df[\"TENURE\"] >= 6), \"NEW_TENURE_CAT\"] = \"medium term customer\"\n",
    "df.loc[(df[\"TENURE\"] > 6), \"NEW_TENURE_CAT\"] = \"long term customer\"\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5ebde83a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:37.860352Z",
     "iopub.status.busy": "2024-10-13T16:52:37.859906Z",
     "iopub.status.idle": "2024-10-13T16:52:37.875073Z",
     "shell.execute_reply": "2024-10-13T16:52:37.873735Z"
    },
    "papermill": {
     "duration": 0.035577,
     "end_time": "2024-10-13T16:52:37.878168",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.842591",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#yaşlı olmayıp partnere sahip olup bakması gereken birey varsa\n",
    "df.loc[((df[\"SENIORCITIZEN\"] == 0) & (df[\"PARTNER\"] == \"Yes\")) &(df[\"DEPENDENTS\"]== \"Yes\"), \"NEW_SPD_CAT\"] = \"responsible customer\"\n",
    "\n",
    "df.loc[((df[\"SENIORCITIZEN\"] == 0) & (df[\"PARTNER\"] == \"No\"))&(df[\"DEPENDENTS\"]== \"No\"), \"NEW_SPD_CAT\"] = \"individual customer\"\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2a5948bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:37.908033Z",
     "iopub.status.busy": "2024-10-13T16:52:37.907629Z",
     "iopub.status.idle": "2024-10-13T16:52:37.920509Z",
     "shell.execute_reply": "2024-10-13T16:52:37.919424Z"
    },
    "papermill": {
     "duration": 0.030557,
     "end_time": "2024-10-13T16:52:37.922869",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.892312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#müşterinin online hizmetlere sahip olup olmadığı\n",
    "df.loc[(df[\"ONLINESECURITY\"] == \"Yes\") & (df[\"ONLINEBACKUP\"] == \"Yes\"), \"NEW_ONLINE_CAT\"] = \"have online service\"\n",
    "\n",
    "df.loc[(df[\"ONLINESECURITY\"] == \"No\") & (df[\"ONLINEBACKUP\"] == \"No\"), \"NEW_ONLINE_CAT\"] = \"have not online service\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fd115e91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:37.953124Z",
     "iopub.status.busy": "2024-10-13T16:52:37.952699Z",
     "iopub.status.idle": "2024-10-13T16:52:37.965744Z",
     "shell.execute_reply": "2024-10-13T16:52:37.964503Z"
    },
    "papermill": {
     "duration": 0.031179,
     "end_time": "2024-10-13T16:52:37.968374",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.937195",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#müşterinin telefon hizmeti olup birden fazla hattının olup olmadığı\n",
    "df.loc[(df[\"PHONESERVICE\"] == \"Yes\") & (df[\"MULTIPLELINES\"] == \"Yes\"), \"NEW_PM_CAT\"] = \"multiple lines\"\n",
    "\n",
    "df.loc[(df[\"PHONESERVICE\"] == \"Yes\") & (df[\"MULTIPLELINES\"] == \"No\"), \"NEW_PM_CAT\"] = \"single line\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "362011c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:38.003568Z",
     "iopub.status.busy": "2024-10-13T16:52:38.002143Z",
     "iopub.status.idle": "2024-10-13T16:52:38.026747Z",
     "shell.execute_reply": "2024-10-13T16:52:38.025040Z"
    },
    "papermill": {
     "duration": 0.04725,
     "end_time": "2024-10-13T16:52:38.030798",
     "exception": false,
     "start_time": "2024-10-13T16:52:37.983548",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#müşterinin film ve tv yayını olup olmadığı\n",
    "df.loc[(df[\"STREAMINGTV\"] == \"Yes\") & (df[\"STREAMINGMOVIES\"] == \"Yes\"), \"NEW_STREAM_CAT\"] = \"tv and movie\"\n",
    "df.loc[(df[\"STREAMINGTV\"] == \"Yes\") & (df[\"STREAMINGMOVIES\"] == \"No\"), \"NEW_STREAM_CAT\"] = \"tv\"\n",
    "df.loc[(df[\"STREAMINGTV\"] == \"No\") & (df[\"STREAMINGMOVIES\"] == \"Yes\"), \"NEW_STREAM_CAT\"] = \"movie\"\n",
    "df.loc[(df[\"STREAMINGTV\"] == \"No\") & (df[\"STREAMINGMOVIES\"] == \"No\"), \"NEW_STREAM_CAT\"] = \"no tv and movie\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "5a9617b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:38.074957Z",
     "iopub.status.busy": "2024-10-13T16:52:38.074546Z",
     "iopub.status.idle": "2024-10-13T16:52:38.107615Z",
     "shell.execute_reply": "2024-10-13T16:52:38.106246Z"
    },
    "papermill": {
     "duration": 0.062576,
     "end_time": "2024-10-13T16:52:38.110829",
     "exception": false,
     "start_time": "2024-10-13T16:52:38.048253",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Observations: 7043\n",
      "Variables: 26\n",
      "cat_cols: 22\n",
      "num_cols: 3\n",
      "cat_but_car: 1\n",
      "num_but_cat: 2\n"
     ]
    }
   ],
   "source": [
    "#Adım 3:  Encoding işlemlerini gerçekleştiriniz\n",
    "# Değişkenlerin tiplerine göre ayrılması işlemi\n",
    "cat_cols, num_cols, cat_but_car = grab_col_names(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "08b3e340",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:38.144784Z",
     "iopub.status.busy": "2024-10-13T16:52:38.144061Z",
     "iopub.status.idle": "2024-10-13T16:52:38.152150Z",
     "shell.execute_reply": "2024-10-13T16:52:38.150620Z"
    },
    "papermill": {
     "duration": 0.0313,
     "end_time": "2024-10-13T16:52:38.157098",
     "exception": false,
     "start_time": "2024-10-13T16:52:38.125798",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# LABEL ENCODING\n",
    "def label_encoder(dataframe, binary_col):\n",
    "    labelencoder = LabelEncoder()\n",
    "    dataframe[binary_col] = labelencoder.fit_transform(dataframe[binary_col])\n",
    "    return dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7ba2a848",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:38.210631Z",
     "iopub.status.busy": "2024-10-13T16:52:38.208316Z",
     "iopub.status.idle": "2024-10-13T16:52:38.295971Z",
     "shell.execute_reply": "2024-10-13T16:52:38.293650Z"
    },
    "papermill": {
     "duration": 0.122797,
     "end_time": "2024-10-13T16:52:38.300864",
     "exception": false,
     "start_time": "2024-10-13T16:52:38.178067",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CUSTOMERID</th>\n",
       "      <th>GENDER</th>\n",
       "      <th>SENIORCITIZEN</th>\n",
       "      <th>PARTNER</th>\n",
       "      <th>DEPENDENTS</th>\n",
       "      <th>TENURE</th>\n",
       "      <th>PHONESERVICE</th>\n",
       "      <th>MULTIPLELINES</th>\n",
       "      <th>INTERNETSERVICE</th>\n",
       "      <th>ONLINESECURITY</th>\n",
       "      <th>ONLINEBACKUP</th>\n",
       "      <th>DEVICEPROTECTION</th>\n",
       "      <th>TECHSUPPORT</th>\n",
       "      <th>STREAMINGTV</th>\n",
       "      <th>STREAMINGMOVIES</th>\n",
       "      <th>CONTRACT</th>\n",
       "      <th>PAPERLESSBILLING</th>\n",
       "      <th>PAYMENTMETHOD</th>\n",
       "      <th>MONTHLYCHARGES</th>\n",
       "      <th>TOTALCHARGES</th>\n",
       "      <th>CHURN</th>\n",
       "      <th>NEW_TENURE_CAT</th>\n",
       "      <th>NEW_SPD_CAT</th>\n",
       "      <th>NEW_ONLINE_CAT</th>\n",
       "      <th>NEW_PM_CAT</th>\n",
       "      <th>NEW_STREAM_CAT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>1</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>29.850</td>\n",
       "      <td>29.850</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>no tv and movie</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>0</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>56.950</td>\n",
       "      <td>1889.500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>no tv and movie</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>1</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>53.850</td>\n",
       "      <td>108.150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>no tv and movie</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>0</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>42.300</td>\n",
       "      <td>1840.750</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>no tv and movie</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>1</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>70.700</td>\n",
       "      <td>151.650</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>no tv and movie</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CUSTOMERID  GENDER  SENIORCITIZEN  PARTNER  DEPENDENTS  TENURE  PHONESERVICE     MULTIPLELINES INTERNETSERVICE ONLINESECURITY ONLINEBACKUP DEVICEPROTECTION TECHSUPPORT STREAMINGTV STREAMINGMOVIES        CONTRACT  PAPERLESSBILLING              PAYMENTMETHOD  MONTHLYCHARGES  TOTALCHARGES  CHURN  NEW_TENURE_CAT  NEW_SPD_CAT  NEW_ONLINE_CAT  NEW_PM_CAT   NEW_STREAM_CAT\n",
       "0  7590-VHVEG       0              0        1           0       1             0  No phone service             DSL             No          Yes               No          No          No              No  Month-to-month                 1           Electronic check          29.850        29.850      0               1            2               2           2  no tv and movie\n",
       "1  5575-GNVDE       1              0        0           0      34             1                No             DSL            Yes           No              Yes          No          No              No        One year                 0               Mailed check          56.950      1889.500      0               0            0               2           1  no tv and movie\n",
       "2  3668-QPYBK       1              0        0           0       2             1                No             DSL            Yes          Yes               No          No          No              No  Month-to-month                 1               Mailed check          53.850       108.150      1               1            0               1           1  no tv and movie\n",
       "3  7795-CFOCW       1              0        0           0      45             0  No phone service             DSL            Yes           No              Yes         Yes          No              No        One year                 0  Bank transfer (automatic)          42.300      1840.750      0               0            0               2           2  no tv and movie\n",
       "4  9237-HQITU       0              0        0           0       2             1                No     Fiber optic             No           No               No          No          No              No  Month-to-month                 1           Electronic check          70.700       151.650      1               1            0               0           1  no tv and movie"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "binary_cols = [col for col in df.columns if df[col].dtypes == \"O\" and df[col].nunique() == 2]\n",
    "binary_cols\n",
    "\n",
    "for col in binary_cols:\n",
    "    df = label_encoder(df, col)\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "7c1c62ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:38.352101Z",
     "iopub.status.busy": "2024-10-13T16:52:38.351472Z",
     "iopub.status.idle": "2024-10-13T16:52:38.416752Z",
     "shell.execute_reply": "2024-10-13T16:52:38.415344Z"
    },
    "papermill": {
     "duration": 0.094757,
     "end_time": "2024-10-13T16:52:38.419888",
     "exception": false,
     "start_time": "2024-10-13T16:52:38.325131",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CUSTOMERID</th>\n",
       "      <th>GENDER</th>\n",
       "      <th>PARTNER</th>\n",
       "      <th>DEPENDENTS</th>\n",
       "      <th>TENURE</th>\n",
       "      <th>PHONESERVICE</th>\n",
       "      <th>PAPERLESSBILLING</th>\n",
       "      <th>MONTHLYCHARGES</th>\n",
       "      <th>TOTALCHARGES</th>\n",
       "      <th>CHURN</th>\n",
       "      <th>NEW_TENURE_CAT</th>\n",
       "      <th>NEW_SPD_CAT</th>\n",
       "      <th>NEW_ONLINE_CAT</th>\n",
       "      <th>NEW_PM_CAT</th>\n",
       "      <th>MULTIPLELINES_No phone service</th>\n",
       "      <th>MULTIPLELINES_Yes</th>\n",
       "      <th>INTERNETSERVICE_Fiber optic</th>\n",
       "      <th>INTERNETSERVICE_No</th>\n",
       "      <th>ONLINESECURITY_No internet service</th>\n",
       "      <th>ONLINESECURITY_Yes</th>\n",
       "      <th>ONLINEBACKUP_No internet service</th>\n",
       "      <th>ONLINEBACKUP_Yes</th>\n",
       "      <th>DEVICEPROTECTION_No internet service</th>\n",
       "      <th>DEVICEPROTECTION_Yes</th>\n",
       "      <th>TECHSUPPORT_No internet service</th>\n",
       "      <th>TECHSUPPORT_Yes</th>\n",
       "      <th>STREAMINGTV_No internet service</th>\n",
       "      <th>STREAMINGTV_Yes</th>\n",
       "      <th>STREAMINGMOVIES_No internet service</th>\n",
       "      <th>STREAMINGMOVIES_Yes</th>\n",
       "      <th>CONTRACT_One year</th>\n",
       "      <th>CONTRACT_Two year</th>\n",
       "      <th>PAYMENTMETHOD_Credit card (automatic)</th>\n",
       "      <th>PAYMENTMETHOD_Electronic check</th>\n",
       "      <th>PAYMENTMETHOD_Mailed check</th>\n",
       "      <th>NEW_STREAM_CAT_no tv and movie</th>\n",
       "      <th>NEW_STREAM_CAT_tv</th>\n",
       "      <th>NEW_STREAM_CAT_tv and movie</th>\n",
       "      <th>SENIORCITIZEN_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>29.850</td>\n",
       "      <td>29.850</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>56.950</td>\n",
       "      <td>1889.500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>53.850</td>\n",
       "      <td>108.150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>42.300</td>\n",
       "      <td>1840.750</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>70.700</td>\n",
       "      <td>151.650</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CUSTOMERID  GENDER  PARTNER  DEPENDENTS  TENURE  PHONESERVICE  PAPERLESSBILLING  MONTHLYCHARGES  TOTALCHARGES  CHURN  NEW_TENURE_CAT  NEW_SPD_CAT  NEW_ONLINE_CAT  NEW_PM_CAT  MULTIPLELINES_No phone service  MULTIPLELINES_Yes  INTERNETSERVICE_Fiber optic  INTERNETSERVICE_No  ONLINESECURITY_No internet service  ONLINESECURITY_Yes  ONLINEBACKUP_No internet service  ONLINEBACKUP_Yes  DEVICEPROTECTION_No internet service  DEVICEPROTECTION_Yes  TECHSUPPORT_No internet service  TECHSUPPORT_Yes  \\\n",
       "0  7590-VHVEG       0        1           0       1             0                 1          29.850        29.850      0               1            2               2           2                            True              False                        False               False                               False               False                             False              True                                 False                 False                            False            False   \n",
       "1  5575-GNVDE       1        0           0      34             1                 0          56.950      1889.500      0               0            0               2           1                           False              False                        False               False                               False                True                             False             False                                 False                  True                            False            False   \n",
       "2  3668-QPYBK       1        0           0       2             1                 1          53.850       108.150      1               1            0               1           1                           False              False                        False               False                               False                True                             False              True                                 False                 False                            False            False   \n",
       "3  7795-CFOCW       1        0           0      45             0                 0          42.300      1840.750      0               0            0               2           2                            True              False                        False               False                               False                True                             False             False                                 False                  True                            False             True   \n",
       "4  9237-HQITU       0        0           0       2             1                 1          70.700       151.650      1               1            0               0           1                           False              False                         True               False                               False               False                             False             False                                 False                 False                            False            False   \n",
       "\n",
       "   STREAMINGTV_No internet service  STREAMINGTV_Yes  STREAMINGMOVIES_No internet service  STREAMINGMOVIES_Yes  CONTRACT_One year  CONTRACT_Two year  PAYMENTMETHOD_Credit card (automatic)  PAYMENTMETHOD_Electronic check  PAYMENTMETHOD_Mailed check  NEW_STREAM_CAT_no tv and movie  NEW_STREAM_CAT_tv  NEW_STREAM_CAT_tv and movie  SENIORCITIZEN_1  \n",
       "0                            False            False                                False                False              False              False                                  False                            True                       False                            True              False                        False            False  \n",
       "1                            False            False                                False                False               True              False                                  False                           False                        True                            True              False                        False            False  \n",
       "2                            False            False                                False                False              False              False                                  False                           False                        True                            True              False                        False            False  \n",
       "3                            False            False                                False                False               True              False                                  False                           False                       False                            True              False                        False            False  \n",
       "4                            False            False                                False                False              False              False                                  False                            True                       False                            True              False                        False            False  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# One-Hot Encoding İşlemi\n",
    "# cat_cols listesinin güncelleme işlemi\n",
    "cat_cols = [col for col in cat_cols if col not in binary_cols and col not in [\"CHURN\"]]\n",
    "cat_cols\n",
    "\n",
    "def one_hot_encoder(dataframe, categorical_cols, drop_first=False):\n",
    "    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)\n",
    "    return dataframe\n",
    "\n",
    "df = one_hot_encoder(df, cat_cols, drop_first=True)\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2558213e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:38.455474Z",
     "iopub.status.busy": "2024-10-13T16:52:38.454777Z",
     "iopub.status.idle": "2024-10-13T16:52:38.506511Z",
     "shell.execute_reply": "2024-10-13T16:52:38.505079Z"
    },
    "papermill": {
     "duration": 0.073504,
     "end_time": "2024-10-13T16:52:38.509750",
     "exception": false,
     "start_time": "2024-10-13T16:52:38.436246",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CUSTOMERID</th>\n",
       "      <th>GENDER</th>\n",
       "      <th>PARTNER</th>\n",
       "      <th>DEPENDENTS</th>\n",
       "      <th>TENURE</th>\n",
       "      <th>PHONESERVICE</th>\n",
       "      <th>PAPERLESSBILLING</th>\n",
       "      <th>MONTHLYCHARGES</th>\n",
       "      <th>TOTALCHARGES</th>\n",
       "      <th>CHURN</th>\n",
       "      <th>NEW_TENURE_CAT</th>\n",
       "      <th>NEW_SPD_CAT</th>\n",
       "      <th>NEW_ONLINE_CAT</th>\n",
       "      <th>NEW_PM_CAT</th>\n",
       "      <th>MULTIPLELINES_No phone service</th>\n",
       "      <th>MULTIPLELINES_Yes</th>\n",
       "      <th>INTERNETSERVICE_Fiber optic</th>\n",
       "      <th>INTERNETSERVICE_No</th>\n",
       "      <th>ONLINESECURITY_No internet service</th>\n",
       "      <th>ONLINESECURITY_Yes</th>\n",
       "      <th>ONLINEBACKUP_No internet service</th>\n",
       "      <th>ONLINEBACKUP_Yes</th>\n",
       "      <th>DEVICEPROTECTION_No internet service</th>\n",
       "      <th>DEVICEPROTECTION_Yes</th>\n",
       "      <th>TECHSUPPORT_No internet service</th>\n",
       "      <th>TECHSUPPORT_Yes</th>\n",
       "      <th>STREAMINGTV_No internet service</th>\n",
       "      <th>STREAMINGTV_Yes</th>\n",
       "      <th>STREAMINGMOVIES_No internet service</th>\n",
       "      <th>STREAMINGMOVIES_Yes</th>\n",
       "      <th>CONTRACT_One year</th>\n",
       "      <th>CONTRACT_Two year</th>\n",
       "      <th>PAYMENTMETHOD_Credit card (automatic)</th>\n",
       "      <th>PAYMENTMETHOD_Electronic check</th>\n",
       "      <th>PAYMENTMETHOD_Mailed check</th>\n",
       "      <th>NEW_STREAM_CAT_no tv and movie</th>\n",
       "      <th>NEW_STREAM_CAT_tv</th>\n",
       "      <th>NEW_STREAM_CAT_tv and movie</th>\n",
       "      <th>SENIORCITIZEN_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>29.850</td>\n",
       "      <td>29.850</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>56.950</td>\n",
       "      <td>1889.500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>53.850</td>\n",
       "      <td>108.150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>42.300</td>\n",
       "      <td>1840.750</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>70.700</td>\n",
       "      <td>151.650</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CUSTOMERID  GENDER  PARTNER  DEPENDENTS  TENURE  PHONESERVICE  PAPERLESSBILLING  MONTHLYCHARGES  TOTALCHARGES  CHURN  NEW_TENURE_CAT  NEW_SPD_CAT  NEW_ONLINE_CAT  NEW_PM_CAT  MULTIPLELINES_No phone service  MULTIPLELINES_Yes  INTERNETSERVICE_Fiber optic  INTERNETSERVICE_No  ONLINESECURITY_No internet service  ONLINESECURITY_Yes  ONLINEBACKUP_No internet service  ONLINEBACKUP_Yes  DEVICEPROTECTION_No internet service  DEVICEPROTECTION_Yes  TECHSUPPORT_No internet service  TECHSUPPORT_Yes  \\\n",
       "0  7590-VHVEG       0        1           0       1             0                 1          29.850        29.850      0               1            2               2           2                            True              False                        False               False                               False               False                             False              True                                 False                 False                            False            False   \n",
       "1  5575-GNVDE       1        0           0      34             1                 0          56.950      1889.500      0               0            0               2           1                           False              False                        False               False                               False                True                             False             False                                 False                  True                            False            False   \n",
       "2  3668-QPYBK       1        0           0       2             1                 1          53.850       108.150      1               1            0               1           1                           False              False                        False               False                               False                True                             False              True                                 False                 False                            False            False   \n",
       "3  7795-CFOCW       1        0           0      45             0                 0          42.300      1840.750      0               0            0               2           2                            True              False                        False               False                               False                True                             False             False                                 False                  True                            False             True   \n",
       "4  9237-HQITU       0        0           0       2             1                 1          70.700       151.650      1               1            0               0           1                           False              False                         True               False                               False               False                             False             False                                 False                 False                            False            False   \n",
       "\n",
       "   STREAMINGTV_No internet service  STREAMINGTV_Yes  STREAMINGMOVIES_No internet service  STREAMINGMOVIES_Yes  CONTRACT_One year  CONTRACT_Two year  PAYMENTMETHOD_Credit card (automatic)  PAYMENTMETHOD_Electronic check  PAYMENTMETHOD_Mailed check  NEW_STREAM_CAT_no tv and movie  NEW_STREAM_CAT_tv  NEW_STREAM_CAT_tv and movie  SENIORCITIZEN_1  \n",
       "0                            False            False                                False                False              False              False                                  False                            True                       False                            True              False                        False            False  \n",
       "1                            False            False                                False                False               True              False                                  False                           False                        True                            True              False                        False            False  \n",
       "2                            False            False                                False                False              False              False                                  False                           False                        True                            True              False                        False            False  \n",
       "3                            False            False                                False                False               True              False                                  False                           False                       False                            True              False                        False            False  \n",
       "4                            False            False                                False                False              False              False                                  False                            True                       False                            True              False                        False            False  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e8f7ae00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:38.554257Z",
     "iopub.status.busy": "2024-10-13T16:52:38.553814Z",
     "iopub.status.idle": "2024-10-13T16:52:38.729238Z",
     "shell.execute_reply": "2024-10-13T16:52:38.727971Z"
    },
    "papermill": {
     "duration": 0.205566,
     "end_time": "2024-10-13T16:52:38.733817",
     "exception": false,
     "start_time": "2024-10-13T16:52:38.528251",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "#Görev 3 : Modelleme \n",
    "# Adım 1:  Sınıflandırma algoritmaları ile modeller kurup, accuracy skorlarını inceleyip. En iyi 4 modeli seçiniz.\n",
    "\n",
    "#Lojistik Regresyon. veri setinin tamamı kullanılacak\n",
    "y = df[\"CHURN\"]\n",
    "\n",
    "X = df.drop([\"CHURN\",\"CUSTOMERID\"], axis=1)\n",
    "\n",
    "log_model = LogisticRegression().fit(X, y)\n",
    "log_model.intercept_\n",
    "log_model.coef_\n",
    "\n",
    "y_pred = log_model.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "0aaf8349",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:38.791328Z",
     "iopub.status.busy": "2024-10-13T16:52:38.790722Z",
     "iopub.status.idle": "2024-10-13T16:52:39.176043Z",
     "shell.execute_reply": "2024-10-13T16:52:39.174697Z"
    },
    "papermill": {
     "duration": 0.416846,
     "end_time": "2024-10-13T16:52:39.178788",
     "exception": false,
     "start_time": "2024-10-13T16:52:38.761942",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.90      0.87      5174\n",
      "           1       0.66      0.54      0.60      1869\n",
      "\n",
      "    accuracy                           0.81      7043\n",
      "   macro avg       0.75      0.72      0.73      7043\n",
      "weighted avg       0.80      0.81      0.80      7043\n",
      "\n"
     ]
    }
   ],
   "source": [
    "def plot_confusion_matrix(y, y_pred):\n",
    "    acc = round(accuracy_score(y, y_pred), 2)\n",
    "    cm = confusion_matrix(y, y_pred)\n",
    "    sns.heatmap(cm, annot=True, fmt=\".0f\")\n",
    "    plt.xlabel('y_pred')\n",
    "    plt.ylabel('y')\n",
    "    plt.title('Accuracy Score: {0}'.format(acc), size=10)\n",
    "    plt.show()\n",
    "\n",
    "plot_confusion_matrix(y, y_pred)\n",
    "\n",
    "print(classification_report(y, y_pred))\n",
    "\n",
    "#accuracy :0.81\n",
    "#f1-score :0.60 \n",
    "#precision :0.66\n",
    "#recall :0.54"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "cc770fa3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:39.214923Z",
     "iopub.status.busy": "2024-10-13T16:52:39.214351Z",
     "iopub.status.idle": "2024-10-13T16:52:39.241978Z",
     "shell.execute_reply": "2024-10-13T16:52:39.239693Z"
    },
    "papermill": {
     "duration": 0.049589,
     "end_time": "2024-10-13T16:52:39.246019",
     "exception": false,
     "start_time": "2024-10-13T16:52:39.196430",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8445169627203392"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_prob = log_model.predict_proba(X)[:, 1]\n",
    "roc_auc_score(y, y_prob)\n",
    "#0.8445"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "1c3e5123",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:39.309079Z",
     "iopub.status.busy": "2024-10-13T16:52:39.308443Z",
     "iopub.status.idle": "2024-10-13T16:52:39.471933Z",
     "shell.execute_reply": "2024-10-13T16:52:39.470020Z"
    },
    "papermill": {
     "duration": 0.20293,
     "end_time": "2024-10-13T16:52:39.479060",
     "exception": false,
     "start_time": "2024-10-13T16:52:39.276130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.91      0.87      1030\n",
      "           1       0.68      0.53      0.59       379\n",
      "\n",
      "    accuracy                           0.81      1409\n",
      "   macro avg       0.76      0.72      0.73      1409\n",
      "weighted avg       0.80      0.81      0.80      1409\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "#Lojistik Regresyon. veri setinin %80 eğitim %20'si test olarak kullanılacak\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,\n",
    "                                                    y,\n",
    "                                                    test_size=0.20, random_state=17)\n",
    "\n",
    "log_model = LogisticRegression().fit(X_train, y_train)\n",
    "\n",
    "y_pred = log_model.predict(X_test)\n",
    "y_prob = log_model.predict_proba(X_test)[:, 1]\n",
    "\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "#accuracy:0.81\n",
    "#f1-score:0.59\n",
    "#precision:0.68\n",
    "#recall:0.53"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "8ae81806",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:39.544813Z",
     "iopub.status.busy": "2024-10-13T16:52:39.544205Z",
     "iopub.status.idle": "2024-10-13T16:52:39.876273Z",
     "shell.execute_reply": "2024-10-13T16:52:39.874682Z"
    },
    "papermill": {
     "duration": 0.368894,
     "end_time": "2024-10-13T16:52:39.879964",
     "exception": false,
     "start_time": "2024-10-13T16:52:39.511070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0.8385339549658017"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RocCurveDisplay.from_estimator(log_model, X_test, y_test)\n",
    "plt.title('ROC Curve')\n",
    "plt.plot([0, 1], [0, 1], 'r--')\n",
    "plt.show()\n",
    "\n",
    "# AUC\n",
    "roc_auc_score(y_test, y_prob)\n",
    "#0.8385"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "97e63d23",
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:39.922991Z",
     "iopub.status.busy": "2024-10-13T16:52:39.922370Z",
     "iopub.status.idle": "2024-10-13T16:52:40.912149Z",
     "shell.execute_reply": "2024-10-13T16:52:40.910911Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 1.015929,
     "end_time": "2024-10-13T16:52:40.916018",
     "exception": false,
     "start_time": "2024-10-13T16:52:39.900089",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "#Lojistik Regresyon. 5 katlı çapraz doğrulama\n",
    "\n",
    "y = df[\"CHURN\"]\n",
    "X = df.drop([\"CHURN\",\"CUSTOMERID\"], axis=1)\n",
    "\n",
    "log_model = LogisticRegression().fit(X, y)\n",
    "\n",
    "cv_results = cross_validate(log_model,\n",
    "                            X, y,\n",
    "                            cv=5,\n",
    "                            scoring=[\"accuracy\", \"precision\", \"recall\", \"f1\", \"roc_auc\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "3f06933c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:40.982720Z",
     "iopub.status.busy": "2024-10-13T16:52:40.982117Z",
     "iopub.status.idle": "2024-10-13T16:52:40.999703Z",
     "shell.execute_reply": "2024-10-13T16:52:40.998312Z"
    },
    "papermill": {
     "duration": 0.054886,
     "end_time": "2024-10-13T16:52:41.003777",
     "exception": false,
     "start_time": "2024-10-13T16:52:40.948891",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.842637560741435"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cv_results['test_accuracy'].mean()\n",
    "# Accuracy: 0.8027\n",
    "cv_results['test_precision'].mean()\n",
    "# Precision: 0.6593\n",
    "cv_results['test_recall'].mean()\n",
    "# Recall: 0.5318\n",
    "cv_results['test_f1'].mean()\n",
    "# F1-score: 0.5887\n",
    "cv_results['test_roc_auc'].mean()\n",
    "# AUC: 0.8426\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "93971784",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:41.058886Z",
     "iopub.status.busy": "2024-10-13T16:52:41.058492Z",
     "iopub.status.idle": "2024-10-13T16:52:41.803120Z",
     "shell.execute_reply": "2024-10-13T16:52:41.801994Z"
    },
    "papermill": {
     "duration": 0.769729,
     "end_time": "2024-10-13T16:52:41.805451",
     "exception": false,
     "start_time": "2024-10-13T16:52:41.035722",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.92      0.89      5174\n",
      "           1       0.73      0.57      0.64      1869\n",
      "\n",
      "    accuracy                           0.83      7043\n",
      "   macro avg       0.80      0.75      0.77      7043\n",
      "weighted avg       0.82      0.83      0.82      7043\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.8882629801267936"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#knn\n",
    "y = df[\"CHURN\"]\n",
    "X = df.drop([\"CHURN\",\"CUSTOMERID\"], axis=1)\n",
    "knn_model = KNeighborsClassifier().fit(X, y)\n",
    "\n",
    "random_user = X.sample(1, random_state=45)\n",
    "\n",
    "knn_model.predict(random_user)\n",
    "\n",
    "# Confusion matrix için y_pred:\n",
    "y_pred = knn_model.predict(X)\n",
    "\n",
    "# AUC için y_prob:\n",
    "y_prob = knn_model.predict_proba(X)[:, 1]\n",
    "\n",
    "print(classification_report(y, y_pred))\n",
    "# acc 0.83\n",
    "# f1 0.64\n",
    "# AUC\n",
    "roc_auc_score(y, y_prob)\n",
    "#0.8882"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "117ff7dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:41.846899Z",
     "iopub.status.busy": "2024-10-13T16:52:41.846492Z",
     "iopub.status.idle": "2024-10-13T16:52:42.637646Z",
     "shell.execute_reply": "2024-10-13T16:52:42.636030Z"
    },
    "papermill": {
     "duration": 0.815969,
     "end_time": "2024-10-13T16:52:42.640264",
     "exception": false,
     "start_time": "2024-10-13T16:52:41.824295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7435517119636964"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#knn 5 katlı çapraz doğrulama\n",
    "cv_results = cross_validate(knn_model, X, y, cv=5, scoring=[\"accuracy\", \"f1\", \"roc_auc\"])\n",
    "\n",
    "cv_results['test_accuracy'].mean()\n",
    "#0.7618\n",
    "cv_results['test_f1'].mean()\n",
    "#0.4997\n",
    "cv_results['test_roc_auc'].mean()\n",
    "#0.7435"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "3d79e9c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:42.679344Z",
     "iopub.status.busy": "2024-10-13T16:52:42.678924Z",
     "iopub.status.idle": "2024-10-13T16:52:42.684457Z",
     "shell.execute_reply": "2024-10-13T16:52:42.683116Z"
    },
    "papermill": {
     "duration": 0.028188,
     "end_time": "2024-10-13T16:52:42.686934",
     "exception": false,
     "start_time": "2024-10-13T16:52:42.658746",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#1.Model Lojistik ve veri setinin tamamı kullanıldı.accuracy :0.81\n",
    "#2.Model Lojistik ve veri seti %80-%20 ayrıldı.accuracy :0.81\n",
    "#3.Model Lojistik ve 5 katlı çapraz doğrulama yapıldı. accuracy :0.8027\n",
    "#4.Model KNN accuracy :0.83\n",
    "#5.Model KNN ve 5 katlı çapraz doğrulama accuracy :0.76\n",
    "\n",
    "#acc göre model başarı 4.Model>2.Model>3.Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "fa346934",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:42.728248Z",
     "iopub.status.busy": "2024-10-13T16:52:42.727136Z",
     "iopub.status.idle": "2024-10-13T16:52:42.736837Z",
     "shell.execute_reply": "2024-10-13T16:52:42.734793Z"
    },
    "papermill": {
     "duration": 0.03384,
     "end_time": "2024-10-13T16:52:42.739690",
     "exception": false,
     "start_time": "2024-10-13T16:52:42.705850",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'algorithm': 'auto',\n",
       " 'leaf_size': 30,\n",
       " 'metric': 'minkowski',\n",
       " 'metric_params': None,\n",
       " 'n_jobs': None,\n",
       " 'n_neighbors': 5,\n",
       " 'p': 2,\n",
       " 'weights': 'uniform'}"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Adım 2: Seçtiğiniz modeller ile hiperparametre optimizasyonu gerçekleştirin ve bulduğunuz hiparparametreler ile modeli  tekrar kurunuz.\n",
    "\n",
    "knn_model = KNeighborsClassifier()\n",
    "knn_model.get_params()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "25354cf4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:52:42.782112Z",
     "iopub.status.busy": "2024-10-13T16:52:42.781068Z",
     "iopub.status.idle": "2024-10-13T16:53:55.429612Z",
     "shell.execute_reply": "2024-10-13T16:53:55.427841Z"
    },
    "papermill": {
     "duration": 72.694553,
     "end_time": "2024-10-13T16:53:55.452564",
     "exception": false,
     "start_time": "2024-10-13T16:52:42.758011",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 96 candidates, totalling 480 fits\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'n_neighbors': 25, 'p': 1}"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#p hangi mesafe yöntemini kullanacağını verir.\n",
    "#p = 1 — Manhattan mesafesi\n",
    "#p = 2 — Öklid mesafesi\n",
    "\n",
    "knn_params = {\"n_neighbors\": range(2, 50),\"p\":range(1,3)}\n",
    "knn_gs_best = GridSearchCV(knn_model,\n",
    "                           knn_params,\n",
    "                           cv=5,\n",
    "                           n_jobs=-1,\n",
    "                           verbose=1).fit(X, y)\n",
    "\n",
    "knn_gs_best.best_params_\n",
    "\n",
    "#{'n_neighbors': 25, 'p': 1}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "76606dd8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-13T16:53:55.493033Z",
     "iopub.status.busy": "2024-10-13T16:53:55.492601Z",
     "iopub.status.idle": "2024-10-13T16:53:58.408242Z",
     "shell.execute_reply": "2024-10-13T16:53:58.406840Z"
    },
    "papermill": {
     "duration": 2.939017,
     "end_time": "2024-10-13T16:53:58.411000",
     "exception": false,
     "start_time": "2024-10-13T16:53:55.471983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8064325846679917"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Final Modeli\n",
    "knn_final = knn_model.set_params(**knn_gs_best.best_params_).fit(X, y)\n",
    "\n",
    "cv_results = cross_validate(knn_final,\n",
    "                            X,\n",
    "                            y,\n",
    "                            cv=5,\n",
    "                            scoring=[\"accuracy\", \"f1\", \"roc_auc\"])\n",
    "\n",
    "cv_results['test_accuracy'].mean()\n",
    "#0.78\n",
    "cv_results['test_f1'].mean()\n",
    "cv_results['test_roc_auc'].mean()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5867451,
     "sourceId": 9614902,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 91.195679,
   "end_time": "2024-10-13T16:54:01.056577",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-13T16:52:29.860898",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
